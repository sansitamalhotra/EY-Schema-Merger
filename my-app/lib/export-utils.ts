import type { Mapping } from "@/components/schema-mapping-workspace"

export type ExportFormat = "csv" | "json" | "excel"

export function exportUnifiedDataset(format: ExportFormat) {
  // Mock unified dataset
  const data = [
    {
      CustomerID: "CUST-001",
      FirstName: "John",
      LastName: "Smith",
      DateOfBirth: "1985-03-15",
      AccountType: "Checking",
      Balance: "15000.00",
      Location: "New York",
    },
    {
      CustomerID: "CLI-2001",
      FirstName: "Jane",
      LastName: "Doe",
      DateOfBirth: "1990-03-22",
      AccountType: "Savings",
      Balance: "25000.00",
      Location: "Northeast",
    },
    {
      CustomerID: "CUST-002",
      FirstName: "Michael",
      LastName: "Johnson",
      DateOfBirth: "1978-11-08",
      AccountType: "Checking",
      Balance: "8500.00",
      Location: "Boston",
    },
  ]

  switch (format) {
    case "csv":
      return exportAsCSV(data)
    case "json":
      return exportAsJSON(data)
    case "excel":
      return exportAsExcel(data)
  }
}

function exportAsCSV(data: Record<string, string>[]) {
  if (data.length === 0) return

  const headers = Object.keys(data[0])
  const csvContent = [
    headers.join(","),
    ...data.map((row) => headers.map((header) => `"${row[header]}"`).join(",")),
  ].join("\n")

  downloadFile(csvContent, "unified-dataset.csv", "text/csv")
}

function exportAsJSON(data: Record<string, string>[]) {
  const jsonContent = JSON.stringify(data, null, 2)
  downloadFile(jsonContent, "unified-dataset.json", "application/json")
}

function exportAsExcel(data: Record<string, string>[]) {
  // For demo purposes, export as CSV with .xlsx extension
  // In production, use a library like xlsx or exceljs
  exportAsCSV(data)
}

function downloadFile(content: string, filename: string, mimeType: string) {
  const blob = new Blob([content], { type: mimeType })
  const url = URL.createObjectURL(blob)
  const link = document.createElement("a")
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}

export function generateMappingReport(mappings: Mapping[]) {
  const report = {
    generatedAt: new Date().toISOString(),
    summary: {
      totalMappings: mappings.length,
      approvedMappings: mappings.filter((m) => m.approved).length,
      highConfidence: mappings.filter((m) => m.confidence === "high").length,
      mediumConfidence: mappings.filter((m) => m.confidence === "medium").length,
      lowConfidence: mappings.filter((m) => m.confidence === "low").length,
    },
    mappings: mappings.map((m) => ({
      source: m.sourceField,
      target: m.targetField,
      confidence: m.confidence,
      approved: m.approved,
    })),
  }

  // Generate markdown report
  const markdown = `# Schema Mapping Documentation Report

**Generated:** ${new Date().toLocaleString()}

## Summary

- **Total Mappings:** ${report.summary.totalMappings}
- **Approved Mappings:** ${report.summary.approvedMappings}
- **High Confidence:** ${report.summary.highConfidence}
- **Medium Confidence:** ${report.summary.mediumConfidence}
- **Low Confidence:** ${report.summary.lowConfidence}

## Mapping Details

| Source Field | Target Field | Confidence | Status |
|--------------|--------------|------------|--------|
${report.mappings
  .map(
    (m) => `| ${m.source} | ${m.target} | ${m.confidence.toUpperCase()} | ${m.approved ? "✓ Approved" : "⚠ Pending"} |`,
  )
  .join("\n")}

## Recommendations

${
  report.summary.lowConfidence > 0
    ? `- Review ${report.summary.lowConfidence} low-confidence mapping(s) before finalizing`
    : "- All mappings have medium or high confidence"
}
${
  report.summary.approvedMappings < report.summary.totalMappings
    ? `- ${report.summary.totalMappings - report.summary.approvedMappings} mapping(s) still require approval`
    : "- All mappings have been approved"
}

---
*Generated by Schema Mapper AI Platform*
`

  downloadFile(markdown, "mapping-report.md", "text/markdown")
}
